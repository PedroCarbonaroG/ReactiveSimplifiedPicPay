@Slf4j
@RestController
@RequiredArgsConstructor
public class OAuthImpl implements IOAuthAPI {

    private final UserService service;
    private final PasswordEncoder passwordEncoder;
    private final JwtHandler jwtHandler;

    @Override
    public Mono<User> registerUser(String username, String password) {

        var user = User.builder()
                .username(username)
                .password(passwordEncoder.encode(password))
                .authorities(Set.of(
                        new SimpleGrantedAuthority(InternalUserEnum.USER.getRole()),
                        new SimpleGrantedAuthority(InternalUserEnum.MS_NAMESPACE.getRole())))
                .build();

        return service.save(user);
    }

    @Override
    public Mono<TokenResponse> generateUserToken(String username, String password) {

        return service
                .findByUsername(username)
                .filter(u -> passwordEncoder.matches(password, u.getPassword()))
                .map(jwtHandler::generateToken);
    }

    @Override
    public String generateAdminToken() {

        return null;
    }

}

================================================================================================================

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class TokenResponse {

    private long expiresIn;
    private String expiresInDescription;
    private String tokenType;
    private String accessToken;

}

================================================================================================================

@Component
@RequiredArgsConstructor
public class JwtHandler implements ReactiveAuthenticationManager, ServerAuthenticationConverter {

    @Value("${jwt.secret-key}")
    private String secretKey;

    @Value("${jwt.token-expiration-seconds}")
    private long tokenExpiration;

    private static final String BEARER = "Bearer ";

    @Override
    public Mono<Authentication> authenticate(Authentication authentication) {

        return Mono.just(authentication)
                .cast(JwtToken.class)
                .filter(jwtToken -> isTokenValid(jwtToken.getToken()))
                .map(JwtToken::withAuthenticated)
                .switchIfEmpty(Mono.error(new AuthenticationServiceException("Invalid token.")));
    }

    @Override
    public Mono<Authentication> convert(ServerWebExchange exchange) {

        return Mono.justOrEmpty(exchange.getRequest().getHeaders().getFirst(HttpHeaders.AUTHORIZATION))
                .filter(header -> header.startsWith(BEARER))
                .map(header -> header.substring(BEARER.length()))
                .map(token -> new JwtToken(token, createUserDetails(token)));
    }

    private UserDetails createUserDetails(String token) {

        return User.builder()
                .username(extractUsername(token))
                .authorities(createAuthorities(token))
                .password(StringUtils.EMPTY)
                .build();
    }

    private List<SimpleGrantedAuthority> createAuthorities(String token) {

        return extractRoles(token).stream()
                .map(role -> "ROLE_" + role)
                .map(SimpleGrantedAuthority::new)
                .toList();
    }

    String extractUsername(String jwt) {
        return extractClaim(jwt, Claims::getSubject);
    }

    List<String> extractRoles(String jwt) {

        return extractClaim(jwt, claims -> {
            Object scopesObj = claims.get("authorities");
            if (scopesObj instanceof List<?> scopesList) {
                List<String> roles = new ArrayList<>();
                for (Object scope : scopesList) {
                    if (scope instanceof String) {
                        roles.add((String) scope);
                    }
                }
                return roles;
            }
            return new ArrayList<>();
        });
    }

    public TokenResponse generateToken(UserDetails userDetails) {

        return TokenResponse
                .builder()
                .tokenType("Bearer")
                .expiresIn(360000L)
                .expiresInDescription("One Hour")
                .accessToken(generateToken(Map.of(), userDetails))
                .build();
    }

    boolean isTokenValid(String jwt) {
        return !isTokenExpired(jwt);
    }

    private boolean isTokenExpired(String jwt) {
        return extractClaim(jwt, Claims::getExpiration).before(new Date());
    }

    private String generateToken(Map<String, Object> extraClaims, UserDetails userDetails) {

        long currentTimeMillis = System.currentTimeMillis();
        return Jwts
                .builder()
                .claims(extraClaims)
                .id(UUID.randomUUID().toString())
                .issuer("OAuth-service")
                .subject("Authentication-Developer-environment")
                .claim("authorities", userDetails.getAuthorities().stream()
                        .map(GrantedAuthority::getAuthority)
                        .map(role -> role.substring("ROLE_".length()))
                        .toArray())
                .issuedAt(new Date(currentTimeMillis))
                .expiration(new Date(currentTimeMillis + tokenExpiration * 1000))
                .signWith(getSigningKey(), Jwts.SIG.HS256)
                .compact();
    }

    private <T> T extractClaim(String jwt, Function<Claims, T> claimResolver) {

        Claims claims = extractAllClaims(jwt);
        return claimResolver.apply(claims);
    }

    private Claims extractAllClaims(String jwt) {
        try {
            return Jwts.parser()
                    .verifyWith(getSigningKey())
                    .build()
                    .parseSignedClaims(jwt)
                    .getPayload();
        } catch (JwtException e) {
            throw new AuthenticationServiceException(e.getMessage());
        }
    }

    private SecretKey getSigningKey() {
        byte[] bytes = Decoders.BASE64.decode(secretKey);
        return Keys.hmacShaKeyFor(bytes);
    }

    @Getter
    private static class JwtToken extends AbstractAuthenticationToken {

        private final String token;
        private final UserDetails principal;

        JwtToken(String token, UserDetails principal) {
            super(principal.getAuthorities());
            this.token = token;
            this.principal = principal;
        }

        Authentication withAuthenticated() {
            JwtToken cloned = new JwtToken(token, principal);
            cloned.setAuthenticated(true);
            return cloned;
        }

        @Override
        public Object getCredentials() {
            return null;
        }

        @Override
        public boolean equals(Object obj) {
            if (!(obj instanceof JwtToken test)) {
                return false;
            }
            if (this.getToken() == null && test.getToken() != null) {
                return false;
            }
            if (this.getToken() != null && !this.getToken().equals(test.getToken())) {
                return false;
            }
            return super.equals(obj);
        }

        @Override
        public int hashCode() {
            int code = super.hashCode();
            if (this.getToken() != null) {
                code ^= this.getToken().hashCode();
            }
            return code;
        }
    }

}

================================================================================================================

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Document(value = "User")
public class User implements UserDetails {

    @Id
    private String id;
    private String username;
    private String fullName;
    private String email;
    private String password;
    private LocalDate createdAt;
    private LocalDate updatedAt;
    private Set<GrantedAuthority> authorities;

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return authorities;
    }

    @Override
    public boolean isAccountNonExpired() {
        return false;
    }

    @Override
    public boolean isAccountNonLocked() {
        return false;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return false;
    }

    @Override
    public boolean isEnabled() {
        return false;
    }

}

================================================================================================================

# APPLICATION KEYS CONFIG
jwt.secret-key = mySecretKeyGoesHereOrTakeFromAnCloudParameterStoreHereJustForDidactics
jwt.token-expiration-seconds = 360000
